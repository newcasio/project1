<h2 class='display-5'>Where we aren't getting along</h2>


  <div>

    <%= link_to "New conflict?  Add here", new_conflict_path, class: 'btn btn-warning' %>
  </div>


  <!--The div element for the map -->
  <div id="map"></div>


<script>
// Initialize and add the map
var locations = <%= @conflicts.pluck(:lat, :lng, :id, :name, :image).to_json.html_safe %>; //creates an array of arrays

function initMap() {
  // The location of Uluru
  // var uluru = {lat: 25.54, lng: -103.41};
  var bounds = new google.maps.LatLngBounds();  //create boundary box, no fixed dimensions
  // The map, centered at Uluru
  var map = new google.maps.Map(document.getElementById('map'));  //create new map, place map
  // The marker, positioned at Uluru
  // var marker = new google.maps.Marker({position: uluru, map: map});
  for( let i =0; i<locations.length; i++){
    var m = new google.maps.Marker({
      position: {
        lat: locations[i][0],
        lng: locations[i][1]
      },
      map: map,
      url: `/conflicts/${locations[i][2]}`
    });
    bounds.extend(m.getPosition());  //boundary box stretches by each marker's (m) position

    google.maps.event.addListener(m, 'click', function() {
        window.location.href = this.url;  //onclick, link to current marker's url
    });  //end event listener
  };  //end for loop
  map.fitBounds(bounds);


}; // initMap()

</script>
  <!--Load the API from the specified URL
  * The async attribute allows the browser to render the page while the API loads
  * The key parameter will contain your own API key (which is not needed for this tutorial)
  * The callback parameter executes the initMap() function
  -->
  <script async defer
  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBfdeYzd23jyR3fKx0oRtdlqCDK-NEzwcI&callback=initMap">
  </script>
